[
    {
        "id": "4a3694b.a06976c",
        "type": "tab",
        "label": "Call4Code",
        "disabled": false,
        "info": ""
    },
    {
        "id": "dc94e67c.91d3d8",
        "type": "debug",
        "z": "4a3694b.a06976c",
        "name": "raw input",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 540,
        "y": 60,
        "wires": []
    },
    {
        "id": "790b8b42.ffc524",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Look for chat input messages",
        "func": "//Whatsapp chat\nif (msg.payload.chatPlatform || msg.payload.LAST_MESSAGE.chatPlatform) {\n    \n    msg.messagingEvent = msg.payload;\n    \n    //almacenamos el número de telf del usuario para poder enviarle la respuesta\n    var user_id = msg.payload.contactId;\n    //formateamos el formato fecha que nos llega en string a miliseconds para almacenarlo en request con el formato correct\n    var timestamp = msg.payload.date;\n    var timestampMiliseconds = Date.parse(timestamp);\n    \n    var inputText = msg.payload.message;\n    \n    var mediaType;\n    var mediaUrl;\n    \n    if(msg.payload.image){\n        inputText = \"%IMAGE\\\\\\\\\"+msg.payload.image;\n        mediaType = \"image\";\n        mediaUrl = msg.payload.image;\n    }// else if (msg.payload.video){ ...\n    \n    msg.messagingEvent.sender = {\"id\": user_id};\n    msg.messagingEvent.request = {\n        \"id\": user_id,\n        \"timestamp\" : user_id + timestamp\n    };\n    \n    msg.messagingEvent.message = {\n        \"context\": {\n            \"mediaUrl\": mediaUrl,\n            \"mediaType\": mediaType\n        },\n        \"text\": inputText\n    };\n    \n    // ya contiene el campo payload.message, lo dejamos como viene:\n    msg.source = \"WhatsApp\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 100,
        "wires": [
            [
                "c0043e03.63d82",
                "eb70d5f5.bc1c28"
            ]
        ]
    },
    {
        "id": "2c4a94f.b46896c",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Prepare for Assistant",
        "func": "var last_context = {\"once\": {}};\n\n\nif (msg.payload[0].context) {\n    last_context = msg.payload[0].context;\n    last_context.once = {};\n}\n\n\nvar inputText;\nvar inputMessage = msg.messagingEvent.message;\n\nvar inputContext = inputMessage.context;\nlast_context = Object.assign(last_context, inputContext);\n\ninputText = inputMessage.text;\n\nmsg.messagingEventText = inputText;\nlast_context.input = inputText;\n\nvar wcs_id = flow.get(\"WCS_workspace_id\")\n\nmsg.payload = inputText;\nmsg.params = {\n    workspace_id: wcs_id,\n    context: last_context\n};\n\nnode.warn(msg.params.context);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 400,
        "wires": [
            [
                "bbb206aa.eb48c8"
            ]
        ]
    },
    {
        "id": "18754ec8.5c2d01",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "pre-processing keywords",
        "func": "var user;\nvar input = msg.payload;\nvar context = msg.params.context || {};\nvar isInputHistoryEnabled = flow.get(\"enableInputHistory\");\nvar isFullDialogHistoryEnabled = flow.get(\"enableFullDialogHistory\");\nvar userInputGOTOEvent;\n\n\n//reset all: context + integrations extra information (like first access to the bot)\nvar doResetInfo = function() {\n    context = msg.params.context = {};\n    msg.payload = flow.get(\"constants\").conversation_keywords.INIT;\n};\n\n//just resets context (fully erase context, so restarts conversation from the root node)\nvar doKillContext = function() {\n    user = msg.params.context && msg.params.context.userInfo;\n    doResetInfo();\n    context.userInfo = user;\n};\n\n//just move dialog node to root (does not erase context)\nvar moveDialogToRoot = function() {\n    context = msg.params.context;\n    if (context && context.system && context.system.dialog_stack) context.system.dialog_stack = [{dialog_node: \"root\"}];\n    context.dialog_node = context.dialog_node && \"root\";\n    resetInputHistory();\n};\n\nvar resetFullDialogHistory = function() {\n    context.full_dialog_history = isFullDialogHistoryEnabled ? null : false;\n}\n\n//input history management\nvar doRecoverPreviousInput = function(numBacksteps) {\n    \n    if (!isInputHistoryEnabled) return;\n    \n    var input_history = context && context.input_history;\n    numBacksteps = (numBacksteps ? numBacksteps : 1);\n    if (input_history && input_history.length > numBacksteps) {\n    \n        //tenemos que recuperar \"numBacksteps+1 inputs al Conversation atrás\"\n        // y por tanto desechamos \"numBacksteps\" intermedios\n        for (i = 0; i < numBacksteps; i++) {\n            input_history.pop();  //se pierde\n        } \n        \n        var recoveredState = RED.util.cloneMessage(input_history[input_history.length-1]);\n        \n        context = msg.params.context = recoveredState.context;\n        context.input_history = input_history;\n    \n        msg.payload = recoveredState.input;\n        \n        return true;\n        \n    } else return false;\n};\n\nvar resetInputHistory = function(){\n    context.input_history = isInputHistoryEnabled ? [] : false;\n};\n\nvar buildupInputHistory = function(){\n    \n    if (!isInputHistoryEnabled) return;\n    \n    //acumular historico\n    var currentContext_withoutHistory = RED.util.cloneMessage(context);\n    delete currentContext_withoutHistory.input_history;\n    \n    var currentState = {\n        input: input,\n        context: currentContext_withoutHistory\n    };\n\n    context.input_history = context.input_history || [];\n    context.input_history.push(currentState);\n}\n\n\nvar checkEventUserInput = function() {\n    \n    var events = flow.get(\"events\");\n    var userInputEvents = events && events.user_input;\n\n    for (var category in userInputEvents) {\n        var event = userInputEvents[category];\n        if (event.activated) {\n            var keywords = event.keywords[flow.get(\"lang\")];\n            if ( keywords.includes(input.toLowerCase().trim()) ){\n                userInputGOTOEvent = event.goto;\n                return true;\n            }\n        }\n    }\n    \n    //No matching keyword\n    return false;\n};\n\n\n\n\n//1. ACCESS DENIED\nif (msg.ACCESS_DENIED) {  //msg.ACCESS_DENIED is set before Conversation (after recovering user's info/mail) \n    //ACCESO PROHIBIDO\n    node.warn(\"ACCESO PROHIBIDO\");\n    var output = flow.get(\"label\")(\"access_not_allowed_msg\");\n    msg.echo = output; \n}\n\n\n//2. PROMPT  -- input comes from an inner loop, from previous Conversation output (user not involved)\n// (repeat last message to user, aka. discard user's last response)\nif (context.once && context.once.activatePrompt) {\n    \n    var feedback_context_once_addition = context.once;  // context.once que llega del Conversation_loop_ouput\n    delete context.once.activatePrompt;                 // lo queremos volver a pasar, pero sin el activatePrompt (nunca saldriamos del loop, nunca llegaria mensaje al usuario)\n    \n    var feedback_text_input = msg.payload;\n    if (doRecoverPreviousInput()) {\n        context.once = context.once || {};\n        var pushFirst_context_addition = {\n            pushFirst_outputText: feedback_text_input\n        };\n        Object.assign(context.once, feedback_context_once_addition, pushFirst_context_addition);  \n    } else {\n        //hacemos un kill\n        doKillContext();\n        \n        context.once = {\n            pushFirst_outputText: flow.get(\"label\")(\"inner_error_restarting_output_msg\")\n        };\n    }\n}\n//3. #COMMANDS  (not ordinary user conversation)\n//Reset flow\nelse if (input == flow.get(\"constants\").keywords.RESET_INFO) {\n    doResetInfo();\n    context.once = {\n        pushFirst_outputText: flow.get(\"label\")(\"reset_action_output_msg\")\n    };\n}\n//Kill flow\nelse if (input == flow.get(\"constants\").keywords.KILL_FLOW) {  \n    doKillContext();\n    context.once = {\n        pushFirst_outputText: flow.get(\"label\")(\"kill_action_output_msg\")\n    };\n}\n//User input events (goto keywords)\nelse if (checkEventUserInput()) {  \n    moveDialogToRoot();\n    msg.payload = flow.get(\"constants\").conversation_keywords.GOTO + userInputGOTOEvent; // \"&gotoHelp\"\nnode.warn(\"Activando GOTO: \" + userInputGOTOEvent);\n}\n//Goto\nelse if (input.startsWith(flow.get(\"constants\").keywords.GOTO)) {  \n    moveDialogToRoot();\n    //si entra: \"#gotoBla\", a Conversation pasamos \"&gotoBla\"\n    var destination = input.substring(flow.get(\"constants\").keywords.GOTO.length);\n    msg.payload = flow.get(\"constants\").conversation_keywords.GOTO + destination;\n}\n//Step back flow\nelse if (input.startsWith(flow.get(\"constants\").keywords.STEP_BACK)) {  \n    \n    var txtBacksteps = input.substring(flow.get(\"constants\").keywords.STEP_BACK.length).trim();\n    var numBacksteps = Number(txtBacksteps);\n    numBacksteps = (isNaN(numBacksteps) || numBacksteps===0 ? 1 : numBacksteps);\n    \n    if (doRecoverPreviousInput(numBacksteps)) {\n        var multiplierText = ( numBacksteps > 1 ? \" (x\"+numBacksteps+\")\" : \"\");\n        context.once = {\n            pushFirst_outputText: flow.get(\"label\")(\"back_action_output_msg\") + multiplierText\n        };\n    } else {\n        //hacemos un kill\n        doKillContext();\n        \n        context.once = {\n            pushFirst_outputText: flow.get(\"label\")(\"back_action_unavailable_output_msg\")\n        };\n    }  \n}    \n//Echo\nelse if (input.startsWith(flow.get(\"constants\").keywords.ECHO)) {  \n    msg.echo = input.substring(flow.get(\"constants\").keywords.ECHO.length+1);\n}    \n//Version\nelse if (input == flow.get(\"constants\").keywords.VERSION) {  \n    var LB = flow.get(\"constants\").anchors.linebreak;\n    msg.echo =  \"Environment: *\" + msg.environment + \"*\" + LB +\n                \"Conversation version: *\" + context.version_WCS + \"*\" + LB +\n                \"Conversation Workspace ID: *\" + msg.params.workspace_id + \"*\" + LB +\n                \"Node-RED version: *\" + msg.version_NR + \"*\";\n}    \n//Root - EMPTY\nelse if (input.trim() == flow.get(\"constants\").keywords.ROOT) {  \n    msg.echo = flow.get(\"label\")(\"root_action_empty_input\");  // (\"waiting for input\")\n}\n\n   \n// -- DEFAULT BEHAVIOUR -- Regular conversation / no #commands (except for #Root pseudo-command_with_conversation)  \n//\n// Store input history    \n//  prepare current input state for storing back after Conversation to make stepback through history possible    \n//\nelse {\n\n//Root - WITH MESSAGE\n    if (input.trim().startsWith(flow.get(\"constants\").keywords.ROOT) && input.trim().length > flow.get(\"constants\").keywords.ROOT.length) {  \n        moveDialogToRoot();\n        //si entra: \"#root bla\", a Conversation pasamos \"bla\"\n        msg.payload = input.substring(flow.get(\"constants\").keywords.ROOT.length+1);\n        \n        input = msg.payload;\n    }   \n    if (context) {\n        //si pasamos por la raiz del dialogo, borramos historico (reiniciamos historico)\n        if (context.system && context.system.dialog_stack[0].dialog_node == \"root\") {\n            resetInputHistory();\n            //resetFullDialogHistory();\n        }\n        \n        //acumular historico\n        buildupInputHistory();\n    }\n}\n\n\nif (msg.echo) {\n    moveDialogToRoot();\n    msg.payload = flow.get(\"constants\").conversation_keywords.ECHO + \" \" + msg.echo;\n}\n\ncontext.input = msg.payload;  // to be used as variable $input within Conversation\n\n//msg.messagingEventText will keep the original input from the user\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "bed93149.12de",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "prepare for loop",
        "func": "var feedback_text_input = msg.payload.text_input;\nvar feedback_context_input = msg.payload.context;\n \nvar wcs_id = flow.get(\"WCS_workspace_id\");\n\nmsg.payload = feedback_text_input;\nmsg.params = {\n    workspace_id: wcs_id,\n    context: feedback_context_input  //la salida del nodo de recuperación contexto\n};\n\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 300,
        "y": 460,
        "wires": [
            [
                "bbb206aa.eb48c8"
            ]
        ]
    },
    {
        "id": "50383ded.d7e9f4",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "set Assistant call",
        "func": "var user = msg.user;\n\nmsg.url =   `https://gateway-fra.watsonplatform.net/assistant/api/v1` +\n            `/workspaces/${msg.params.workspace_id}` +\n            `/message?version=2018-09-20`;\n\nmsg.payload = {\n    \"input\": {\n        \"text\": msg.payload\n    },\n    \"context\": msg.params.context\n}\n\n\nconst APIKEY_WATSON_DEFAULT_USERNAME = \"apikey\";\nvar username = flow.get(\"WCS_apiuser\") ? flow.get(\"WCS_apiuser\") : APIKEY_WATSON_DEFAULT_USERNAME;\n\nvar auth = username + ':' + flow.get(\"WCS_apikey\");  \nvar buff = new Buffer(auth);  \nvar base64auth = buff.toString('base64');\n\nmsg.headers = {\n    \"Authorization\": `Basic ${base64auth}`,\n    \"X-Watson-Metadata\": `customer_id=${user}`\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1090,
        "y": 400,
        "wires": [
            [
                "8d548ea2.bd89d"
            ]
        ]
    },
    {
        "id": "bbb206aa.eb48c8",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "(clean)",
        "func": "delete msg.messagingEvent;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 400,
        "wires": [
            [
                "50383ded.d7e9f4"
            ]
        ]
    },
    {
        "id": "67c38919.2bcbd8",
        "type": "link in",
        "z": "4a3694b.a06976c",
        "name": "INPUT conversation loop",
        "links": [
            "8ce08b72.5193",
            "a91a0ccc.60e7a8",
            "a91061cf.2fc65",
            "7c50583e.21a188",
            "61c25768.afd798",
            "f28558b0.286588"
        ],
        "x": 115,
        "y": 460,
        "wires": [
            [
                "bed93149.12de"
            ]
        ]
    },
    {
        "id": "8d548ea2.bd89d",
        "type": "http request",
        "z": "4a3694b.a06976c",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1290,
        "y": 400,
        "wires": [
            [
                "6ddebf0f.25bcf"
            ]
        ]
    },
    {
        "id": "6ddebf0f.25bcf",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "(clean)",
        "func": "delete msg.url;\ndelete msg.responseUrl;\ndelete msg.statusCode;\ndelete msg.headers;\n\ndelete msg.params;\n\nmsg.conversation = msg.payload;\n\nmsg.textStack = msg.payload.output.text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1470,
        "y": 400,
        "wires": [
            [
                "cd7b4ab1.7e20e8",
                "a121b256.a3772"
            ]
        ]
    },
    {
        "id": "cd7b4ab1.7e20e8",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Parse text",
        "func": "var textStack = msg.textStack;\nvar messageStack = msg.messageStack = [];\n\nvar buildTextMessageStructure = function(textOutput) {\n    \n    if (!textOutput || textOutput.trim() === \"\") return null;\n    \n    return {\n       \"text\": textOutput\n    };\n};\n\nvar parseTextThenPushTextToStackMessage = function(textOutput) {\n\n    if (textOutput.length > 0) {\n        var txtMsgStr = buildTextMessageStructure(textOutput);\n        if (txtMsgStr) messageStack.push(txtMsgStr);\n    }\n    \n};\n\ntextStack.forEach( function(textElement){\n    parseTextThenPushTextToStackMessage(textElement);    \n});\n\nreturn msg;\n",
        "outputs": "1",
        "noerr": 0,
        "x": 1640,
        "y": 400,
        "wires": [
            [
                "7ae357ae.6aa308",
                "296e92dd.f82f7e"
            ]
        ]
    },
    {
        "id": "296e92dd.f82f7e",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "custom actions (integrations)",
        "func": "if (msg.conversation.context.once.action && Object.getOwnPropertyNames(msg.conversation.context.once.action).length > 0) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 320,
        "y": 540,
        "wires": [
            [
                "e8fb2219.f415c"
            ],
            [
                "e6e501c6.659ee"
            ]
        ],
        "outputLabels": [
            "",
            "no integrations"
        ]
    },
    {
        "id": "e8fb2219.f415c",
        "type": "link out",
        "z": "4a3694b.a06976c",
        "name": "GOTO third-party actions",
        "links": [
            "fd0459a9.0aec48",
            "1075e134.e10b2f",
            "33140082.0bf98",
            "99d10ed4.37612",
            "2966d5a1.ad402a"
        ],
        "x": 535,
        "y": 520,
        "wires": []
    },
    {
        "id": "c0043e03.63d82",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Get last user context prep",
        "func": "msg.request = msg.messagingEvent.request.id;\nmsg.user = msg.messagingEvent.sender.id;\n\n// Decidimos el tipo de servicio\nmsg.data_service_request = {\n    service: \"GET_LAST_USER_CONTEXT\",\n    implementation: flow.get(\"data_service_active\"),\n    // dentro del subflow harás:\n    // config = msg.data_service_config[msg.data_service.implementation]\n    params: {\n        user: msg.user\n    }\n}\n\nif(msg.payload.LAST_MESSAGE){\n    \n}else{\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 300,
        "wires": [
            [
                "c42a347b.ee22f8"
            ]
        ]
    },
    {
        "id": "6c15fc8a.69d3b4",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Delete historic prep",
        "func": "msg.data_service_request = {\n    service: \"DELETE_HISTORIC\",\n    implementation: flow.get(\"data_service_active\"),\n    // dentro del subflow harás:\n    // config = msg.data_service_config[msg.data_service.implementation]\n    params: msg.payload\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "f12d43a1.af741"
            ]
        ]
    },
    {
        "id": "7ae357ae.6aa308",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Save user info prep",
        "func": "var conversationData = msg.conversation;\nconversationData.user = msg.user;\n\nmsg.data_service_request = {\n    service: \"SAVE_USER_CONTEXT\",\n    implementation: flow.get(\"data_service_active\"),\n    params: {\n        conversation: conversationData\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1850,
        "y": 400,
        "wires": [
            [
                "e898dba1.ce8bb8"
            ]
        ]
    },
    {
        "id": "83eead2a.ac2c2",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Custom API implementation",
        "func": "if (msg.conversation.context.once.action.command == \"processPhoto\") {\n    node.send([null, msg]);\n} else {\n    node.send([msg, null]);\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 340,
        "y": 800,
        "wires": [
            [
                "cde8a9b7.e22878"
            ],
            [
                "f7461a59.54aee8",
                "28df5c1a.58dd54"
            ]
        ]
    },
    {
        "id": "2966d5a1.ad402a",
        "type": "link in",
        "z": "4a3694b.a06976c",
        "name": "INPUT custom API implementation",
        "links": [
            "e8fb2219.f415c"
        ],
        "x": 115,
        "y": 800,
        "wires": [
            [
                "83eead2a.ac2c2"
            ]
        ]
    },
    {
        "id": "f28558b0.286588",
        "type": "link out",
        "z": "4a3694b.a06976c",
        "name": "OUTPUT custom API implementation",
        "links": [
            "67c38919.2bcbd8"
        ],
        "x": 775,
        "y": 1060,
        "wires": []
    },
    {
        "id": "f7461a59.54aee8",
        "type": "debug",
        "z": "4a3694b.a06976c",
        "name": "processPhoto detected",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 540,
        "y": 720,
        "wires": []
    },
    {
        "id": "e6e501c6.659ee",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Set BotMaker WhatsApp API call",
        "func": "msg.url = \"https://go.botmaker.com/api/v1.0/message/v3\";\n\nvar accessToken = flow.get(\"WA_accessToken\")\nmsg.headers = {\n    \"access-token\": accessToken,\n    \"Accept\": \"application/json\",\n};\n\nvar chatChannelNumber = flow.get(\"WA_chatChannelNumber\");\nvar platformContactId = msg.user;\n\nmsg.payload = {\n    \"chatPlatform\": \"whatsapp\",\n    \"chatChannelNumber\": chatChannelNumber,\n    \"platformContactId\": platformContactId,\n};\n\nvar textResponse = msg.messageStack;\n\nif (textResponse.length > 0) {\n    msg.payload.messageText = textResponse.shift().text;\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 540,
        "wires": [
            [
                "f015fffb.10447"
            ]
        ]
    },
    {
        "id": "eb70d5f5.bc1c28",
        "type": "http response",
        "z": "4a3694b.a06976c",
        "name": "reply WhatsApp webhook (200 :OK)",
        "statusCode": "",
        "headers": {},
        "x": 1160,
        "y": 100,
        "wires": []
    },
    {
        "id": "f015fffb.10447",
        "type": "http request",
        "z": "4a3694b.a06976c",
        "name": "Send responses to messenger",
        "method": "POST",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 1470,
        "y": 600,
        "wires": [
            [
                "e6e501c6.659ee"
            ]
        ]
    },
    {
        "id": "ffc793c9.45a1",
        "type": "http in",
        "z": "4a3694b.a06976c",
        "name": "WebService Call (entry point)",
        "url": "/callforcode",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 100,
        "wires": [
            [
                "e9f739cc.60ad18",
                "dc94e67c.91d3d8"
            ]
        ]
    },
    {
        "id": "e9f739cc.60ad18",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Configuration",
        "func": "flow.set(\"WCS_workspace_id\", \"\");\nflow.set(\"WCS_apikey\", \"\");\n\nflow.set(\"data_service_active\", \"default\");\nmsg._data_service_config = {\n    default: {\n        cloudantAccount: \"\",\n        cloudantPassword: \"\",\n        cloudantDatabaseInfoPills: \"\"\n    }\n}\n\nflow.set(\"WA_chatChannelNumber\",\"\");\nflow.set(\"WA_accessToken\",\"\");\n\nflow.set(\"lastInputElapsedTimeLimit\", 0.5);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "790b8b42.ffc524"
            ]
        ]
    },
    {
        "id": "cde8a9b7.e22878",
        "type": "link out",
        "z": "4a3694b.a06976c",
        "name": "",
        "links": [
            "7bab2638.1a3fa8"
        ],
        "x": 880,
        "y": 800,
        "wires": []
    },
    {
        "id": "28df5c1a.58dd54",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Extract file url and define filename",
        "func": "var action = msg.conversation.context.once.action;\nvar timestamp = Date.now();\n\nmsg.payload = action.params;\n\nmsg.filename = timestamp+\".jpeg\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 880,
        "wires": [
            [
                "24d8b584.b98cba"
            ]
        ]
    },
    {
        "id": "24d8b584.b98cba",
        "type": "jimp-image",
        "z": "4a3694b.a06976c",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "720",
        "parameter1Type": "num",
        "parameter2": "1080",
        "parameter2Type": "num",
        "parameter3": "RESIZE_BEZIER",
        "parameter3Type": "resizeMode",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "parameterCount": 3,
        "jimpFunction": "resize",
        "selectedJimpFunction": {
            "name": "resize",
            "fn": "resize",
            "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
            "parameters": [
                {
                    "name": "w",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "h",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "mode",
                    "type": "resizeMode",
                    "required": false,
                    "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                }
            ]
        },
        "x": 590,
        "y": 880,
        "wires": [
            [
                "98b3d2d5.4b254"
            ]
        ]
    },
    {
        "id": "fedf71e5.b25d7",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Prepare OCR call",
        "func": "msg.payload = msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1050,
        "y": 880,
        "wires": [
            [
                "142e16e4.02e9a9",
                "eddd78c2.9417f8"
            ]
        ]
    },
    {
        "id": "4c45fd2d.3862e4",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Process OCR response",
        "func": "var res = msg.payload;\n\nvar date = res.match(/[0-3]{1}[0-9]{1}(\\-|\\/| |\\.)[0-3]{1}[0-9]{1}/g);\nvar dateShort = res.match(/[0-3]{1}[0-9]{1}(\\-|\\/| |\\.)20[0-9]{2}/g);\nvar dateLong = res.match(/[0-3]{1}[0-9]{1}(\\-|\\/| |\\.)[0-3][0-9]{1}(\\-|\\/| |\\.)((20[0-9]{2})|(2[0-9]{1}))/g);\n\nif(date){\n    date = date[0];\n}\nif(dateShort){\n    date = dateShort[0];\n}\nif(dateLong){\n    date = dateLong[0];\n}\n\nmsg.foundDate = date;\n\nvar monthArr = res.match(/[a-zA-z]{3}[^a-zA-Z\\n]{1}/g);\n\nfunction levenshtein(a, b){\n  if(a.length === 0) return b.length; \n  if(b.length === 0) return a.length; \n\n  var matrix = [];\n\n  // increment along the first column of each row\n  var i;\n  for(i = 0; i <= b.length; i++){\n    matrix[i] = [i];\n  }\n\n  // increment each column in the first row\n  var j;\n  for(j = 0; j <= a.length; j++){\n    matrix[0][j] = j;\n  }\n\n  // Fill in the rest of the matrix\n  for(i = 1; i <= b.length; i++){\n    for(j = 1; j <= a.length; j++){\n      if(b.charAt(i-1) == a.charAt(j-1)){\n        matrix[i][j] = matrix[i-1][j-1];\n      } else {\n        matrix[i][j] = Math.min(matrix[i-1][j-1] + 1, // substitution\n                                Math.min(matrix[i][j-1] + 1, // insertion\n                                         matrix[i-1][j] + 1)); // deletion\n      }\n    }\n  }\n\n  return matrix[b.length][a.length];\n}\n\nconst monthNames = {\n    \"eng\": [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"],\n    \"spa\": [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"set\", \"oct\", \"nov\", \"dic\"]\n};\n\nconst monthTranslations = {\n    \"spa\": {\n        \"ene\": \"enero\",\n        \"feb\": \"febrero\",\n        \"mar\": \"marzo\",\n        \"abr\": \"abril\",\n        \"may\": \"mayo\",\n        \"jun\": \"junio\",\n        \"jul\": \"julio\",\n        \"ago\": \"agosto\",\n        \"set\": \"setiembre\",\n        \"oct\": \"octubre\",\n        \"nov\": \"noviembre\",\n        \"dic\": \"diciembre\"\n    }\n}\n\nnode.warn(monthArr);\n\nvar foundMonths = [];\n\nif(monthArr){\n    \n    monthArr.forEach(month => {\n        monthNames.spa.forEach(correctMonth => {\n            if(levenshtein(month.toLowerCase(), correctMonth) <= 2){\n                var monthDate = res.match(/[a-zA-z]{3}[^a-zA-Z]{1}([0-9]{4}|[0-9]{2})/g);\n                if(monthDate){\n                    node.warn(monthDate);\n                    foundMonths.push({\"predicted\": correctMonth, \"found\": month});\n                    monthDate.forEach(pos => {\n                        if(levenshtein(pos.toLowerCase().substring(0, 3), correctMonth) <= 2){\n                            msg.foundDate = monthTranslations.spa[correctMonth] + \" \" + (pos.length == 8 ? pos.slice(-4) : pos.slice(-2));\n                        }\n                    });\n                }\n            }\n        });\n    });\n\n}\n\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 1060,
        "wires": [
            [
                "fd167d27.13a36"
            ]
        ]
    },
    {
        "id": "43e245e3.ad3e9c",
        "type": "debug",
        "z": "4a3694b.a06976c",
        "name": "OCR response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 760,
        "y": 940,
        "wires": []
    },
    {
        "id": "7ce9f0e7.1fb5e",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Prep file removal",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 980,
        "wires": [
            [
                "614a2cbd.21c214"
            ]
        ]
    },
    {
        "id": "614a2cbd.21c214",
        "type": "fs-ops-delete",
        "z": "4a3694b.a06976c",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "x": 950,
        "y": 980,
        "wires": [
            [
                "fd43a25.dffd26"
            ]
        ]
    },
    {
        "id": "fd43a25.dffd26",
        "type": "debug",
        "z": "4a3694b.a06976c",
        "name": "File removal debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "jobs",
        "targetType": "msg",
        "x": 1030,
        "y": 940,
        "wires": []
    },
    {
        "id": "fd167d27.13a36",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "",
        "func": "var context = msg.conversation.context;\n\ncontext.foundDate = msg.foundDate;\n\nif(msg.statusCode === 200){\n    context.input = \"&wsOK\";\n}else{\n    context.input = \"&wsKO\";\n}\n\nvar loop_input = {\n    text_input: context.input,\n    context: context\n};\n\nmsg.payload = loop_input;\n\ndelete msg.conversation.context.once.action;\ndelete msg.conversation.context.photo_url;\ndelete msg.foundDate;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 1060,
        "wires": [
            [
                "f28558b0.286588"
            ]
        ]
    },
    {
        "id": "98b3d2d5.4b254",
        "type": "jimp-image",
        "z": "4a3694b.a06976c",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "filename",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 810,
        "y": 880,
        "wires": [
            [
                "fedf71e5.b25d7"
            ]
        ]
    },
    {
        "id": "142e16e4.02e9a9",
        "type": "debug",
        "z": "4a3694b.a06976c",
        "name": "pre OCR call",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 800,
        "wires": []
    },
    {
        "id": "eddd78c2.9417f8",
        "type": "tesseract",
        "z": "4a3694b.a06976c",
        "name": "",
        "language": "eng",
        "x": 580,
        "y": 940,
        "wires": [
            [
                "4c45fd2d.3862e4",
                "43e245e3.ad3e9c",
                "7ce9f0e7.1fb5e"
            ]
        ]
    },
    {
        "id": "c42a347b.ee22f8",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Prepare for search by user",
        "func": "var request = msg.data_service_request;\nvar service = msg._data_service_config[msg.data_service_request.implementation];\n\n\nvar cloudantUsername = service.cloudantAccount;\nvar cloudantPassword = service.cloudantPassword;\nvar cloudantAccount = service.cloudantAccount;\n\nmsg.url = `https://${cloudantAccount}`+\n            `.cloudant.com/user_context/_design/searchByUserId/_search/siUserTimestamp`;\n\nvar query_formatted_user = (typeof request.params.user == \"number\") ? request.params.user : \"'\" + request.params.user + \"'\";\n\nmsg.payload = { \n    query: \"user: \" + query_formatted_user,  //user: 5  //user: 'abc'\n    sort: [\"-timestamp<number>\"],\n    limit: 2,\n    include_docs: true\n};\n\nvar auth = cloudantUsername + ':' + cloudantPassword;  \nvar buff = new Buffer(auth);  \nvar base64auth = buff.toString('base64');\n\n(msg.headers = {\n    \"Authorization\": `Basic ${base64auth}`\n    //\"X-Watson-Metadata\": `customer_id=${user}`   //esto es para poder borrar de los logs (GDPR + &input)\n    //si msg.payload es un objeto {}, se pone autom. Content-Type:application/json\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 300,
        "wires": [
            [
                "3615de40.8ef6b2"
            ]
        ]
    },
    {
        "id": "3615de40.8ef6b2",
        "type": "http request",
        "z": "4a3694b.a06976c",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 870,
        "y": 300,
        "wires": [
            [
                "17e8ddcc.96b452"
            ]
        ]
    },
    {
        "id": "17e8ddcc.96b452",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "(clean)",
        "func": "//clean msg.cloudant\ndelete msg.cloudant;\n\n//extraemos el objeto en el formato que nos interesa\nmsg.payload = msg.payload.rows.map(function(item){\n    return item.doc;\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 300,
        "wires": [
            [
                "6c15fc8a.69d3b4",
                "2c4a94f.b46896c"
            ]
        ]
    },
    {
        "id": "f12d43a1.af741",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "prepare to delete historic",
        "func": "var historial = msg.data_service_request.params\n\nif (historial.length >= 2){\n    \n    var service = msg._data_service_config[msg.data_service_request.implementation]\n\n    var cloudantUsername = service.cloudantAccount\n    var cloudantPassword = service.cloudantPassword\n    var cloudantAccount = service.cloudantAccount\n    \n    var documentId = historial[1]._id;\n    var documentRev = historial[1]._rev;\n\n    msg.url = `https://${cloudantAccount}`+\n            `.cloudant.com/user_context/${documentId}?rev=${documentRev}`;\n            \n    var auth = cloudantUsername + ':' + cloudantPassword;  \n    var buff = new Buffer(auth);  \n    var base64auth = buff.toString('base64');\n    \n    (msg.headers = {\n        \"Authorization\": `Basic ${base64auth}`\n        //\"X-Watson-Metadata\": `customer_id=${user}`   //esto es para poder borrar de los logs (GDPR + &input)\n        //si msg.payload es un objeto {}, se pone autom. Content-Type:application/json\n    });\n    \n    return msg; //borrar el documento más antiguo!!\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1510,
        "y": 300,
        "wires": [
            [
                "c96e165f.8e88b8"
            ]
        ]
    },
    {
        "id": "c96e165f.8e88b8",
        "type": "http request",
        "z": "4a3694b.a06976c",
        "name": "",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 1770,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e898dba1.ce8bb8",
        "type": "function",
        "z": "4a3694b.a06976c",
        "name": "Prepare for cloudant",
        "func": "var request = msg.data_service_request;\nvar service = msg._data_service_config[request.implementation];\n\nvar conversationData = request.params.conversation;\n\nvar cloudantUsername = service.cloudantAccount\nvar cloudantPassword = service.cloudantPassword\nvar cloudantAccount = service.cloudantAccount\n\n\nvar fecha = new Date();\nconversationData.timestamp = fecha.getTime();\nconversationData.timestamp_str = \"\";\nconversationData.timestamp_str += fecha.getDate()<10 ? \"0\"+fecha.getDate() : fecha.getDate();\nconversationData.timestamp_str += \"/\";\nconversationData.timestamp_str += (fecha.getMonth()+1) < 10 ? \"0\"+(fecha.getMonth()+1) : (fecha.getMonth()+1);\nconversationData.timestamp_str += \"/\";\nconversationData.timestamp_str += fecha.getFullYear();\nconversationData.timestamp_str += \" \";\nconversationData.timestamp_str += fecha.getHours()<10 ? \"0\"+fecha.getHours() : fecha.getHours();\nconversationData.timestamp_str += \":\";\nconversationData.timestamp_str += fecha.getMinutes()<10 ? \"0\"+fecha.getMinutes() : fecha.getMinutes();\nconversationData.timestamp_str += \":\";\nconversationData.timestamp_str += fecha.getSeconds()<10 ? \"0\"+fecha.getSeconds() : fecha.getSeconds();\n\nmsg.payload = conversationData;\n\n\nmsg.url = `https://${cloudantAccount}`+`.cloudant.com/user_context/`;\n        \nvar auth = cloudantUsername + ':' + cloudantPassword;  \nvar buff = new Buffer(auth);  \nvar base64auth = buff.toString('base64');\n\n(msg.headers = {\n    \"Authorization\": `Basic ${base64auth}`\n    //\"X-Watson-Metadata\": `customer_id=${user}`   //esto es para poder borrar de los logs (GDPR + &input)\n    //si msg.payload es un objeto {}, se pone autom. Content-Type:application/json\n});        \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2080,
        "y": 400,
        "wires": [
            [
                "629b6087.78e01"
            ]
        ]
    },
    {
        "id": "629b6087.78e01",
        "type": "http request",
        "z": "4a3694b.a06976c",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2290,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a121b256.a3772",
        "type": "debug",
        "z": "4a3694b.a06976c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1690,
        "y": 500,
        "wires": []
    }
]